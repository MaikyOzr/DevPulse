// <auto-generated />
using System;
using DevPulse.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DevPulse.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250504075428_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DevPulse.Infrastructure.Models.CodeFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CodeFiles");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.CodeSmell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CodeFileId")
                        .HasColumnType("uuid");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CodeFileId");

                    b.ToTable("CodeSmells");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.Commit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommitHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Commits");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.FocusSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GoalDescription")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("FocusSessions");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.FocusSessionSmell", b =>
                {
                    b.Property<Guid>("FocusSessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CodeSmellId")
                        .HasColumnType("uuid");

                    b.HasKey("FocusSessionId", "CodeSmellId");

                    b.HasIndex("CodeSmellId");

                    b.ToTable("FocusSessionSmells");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RepoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.CodeFile", b =>
                {
                    b.HasOne("DevPulse.Infrastructure.Models.Project", "Project")
                        .WithMany("CodeFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.CodeSmell", b =>
                {
                    b.HasOne("DevPulse.Infrastructure.Models.CodeFile", "CodeFile")
                        .WithMany("Smells")
                        .HasForeignKey("CodeFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeFile");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.Commit", b =>
                {
                    b.HasOne("DevPulse.Infrastructure.Models.Project", "Project")
                        .WithMany("Commits")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.FocusSession", b =>
                {
                    b.HasOne("DevPulse.Infrastructure.Models.Project", "Project")
                        .WithMany("FocusSessions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.FocusSessionSmell", b =>
                {
                    b.HasOne("DevPulse.Infrastructure.Models.CodeSmell", "CodeSmell")
                        .WithMany("FocusSessions")
                        .HasForeignKey("CodeSmellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevPulse.Infrastructure.Models.FocusSession", "FocusSession")
                        .WithMany("TargetSmells")
                        .HasForeignKey("FocusSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmell");

                    b.Navigation("FocusSession");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.CodeFile", b =>
                {
                    b.Navigation("Smells");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.CodeSmell", b =>
                {
                    b.Navigation("FocusSessions");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.FocusSession", b =>
                {
                    b.Navigation("TargetSmells");
                });

            modelBuilder.Entity("DevPulse.Infrastructure.Models.Project", b =>
                {
                    b.Navigation("CodeFiles");

                    b.Navigation("Commits");

                    b.Navigation("FocusSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
